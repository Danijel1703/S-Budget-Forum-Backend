// <auto-generated />
using System;
using Forum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forum.DAL.Migrations
{
    [DbContext(typeof(ForumContext))]
    [Migration("20230201211405_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forum.DAL.Entity.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Forum.DAL.Entity.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Forum.DAL.Entity.ReactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReactionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReactionTypeId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("Forum.DAL.Entity.ReactionTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReactionType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("128df2e1-c303-42c2-8026-8a6b00397be3"),
                            DateCreated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1197),
                            DateUpdated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1197),
                            Name = "upvote"
                        },
                        new
                        {
                            Id = new Guid("da7cd98a-0ff6-4531-bfcd-aa8ebb901a68"),
                            DateCreated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1199),
                            DateUpdated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1199),
                            Name = "downvote"
                        });
                });

            modelBuilder.Entity("Forum.DAL.Entity.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e121d7d7-ed42-4e35-99d9-745d80ef0ed4"),
                            DateCreated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1120),
                            DateUpdated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1121),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("f61d4973-7193-4e7d-91bd-8e9a6f6813c4"),
                            DateCreated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1123),
                            DateUpdated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1123),
                            Name = "super-admin"
                        },
                        new
                        {
                            Id = new Guid("5f8e9c6e-abd5-4790-b19d-fc35ee1ba64e"),
                            DateCreated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1125),
                            DateUpdated = new DateTime(2023, 2, 1, 21, 14, 5, 525, DateTimeKind.Utc).AddTicks(1125),
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Forum.DAL.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Forum.DAL.Entity.CommentEntity", b =>
                {
                    b.HasOne("Forum.DAL.Entity.PostEntity", "Post")
                        .WithMany("Comment")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forum.DAL.Entity.UserEntity", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forum.DAL.Entity.PostEntity", b =>
                {
                    b.HasOne("Forum.DAL.Entity.UserEntity", "User")
                        .WithMany("Post")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forum.DAL.Entity.ReactionEntity", b =>
                {
                    b.HasOne("Forum.DAL.Entity.ReactionTypeEntity", "ReactionType")
                        .WithMany("Reaction")
                        .HasForeignKey("ReactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReactionType");
                });

            modelBuilder.Entity("Forum.DAL.Entity.UserEntity", b =>
                {
                    b.HasOne("Forum.DAL.Entity.RoleEntity", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Forum.DAL.Entity.PostEntity", b =>
                {
                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Forum.DAL.Entity.ReactionTypeEntity", b =>
                {
                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("Forum.DAL.Entity.RoleEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Forum.DAL.Entity.UserEntity", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Post");
                });
#pragma warning restore 612, 618
        }
    }
}
